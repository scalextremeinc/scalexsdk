import urllib
import urllib2
import json
import time
import datetime
import base64
#
from scalex import userinfo
import scalex

def getScripts(type = '', script = '', version = 0):
  '''
    API : /scripts
    Method : GET
    URL structure : https://<servername>/v0/scripts?access_token=<valid access token>
    Input params :
    version (optional) parameter
    type (optional) 
    type=user     Return my scripts
    type=org      Return org scripts
    type=purchase Return purchase scripts
  '''
  assert type in ['', 'user', 'org', 'purchase'], "script type must be one of ['', 'user', 'org', 'purchase']"
  path = '/scripts'
  query = {}
  if type != '':
    query['type'] = type
  elif script != '':
    path = '/scripts/' + str(script['scriptId'])
    if version != 0:
      query['version'] = version
  url = userinfo.geturl(path, query)
  request = urllib2.Request(url)
  response = urllib2.urlopen(request)
  returnData = json.loads(response.read())
  return returnData

def getContent(script, version = -1):
  '''
    API : /scripts or /scripts/{id}
    Method : GET
    URL structure : https://<servername>/v0/scripts?access_token=<valid access token>
    Input params : version (optional) parameter
  '''
  scriptid = script['scriptId']
  path = '/scripts/%s' % (str(scriptid))
  query = {
  }
  if version != -1:
    query['version'] = version
  url = userinfo.geturl(path, query)
  request = urllib2.Request(url)
  response = urllib2.urlopen(request)
  returnData = json.loads(response.read())
  return returnData

def getVersions(script):
  '''
    API : /scripts/versions?id=1234
    Method : GET
  '''
  path = '/scripts/%s/versions' % (str(script['scriptId']))
  query = {
  }
  url = userinfo.geturl(path, query)
  request = urllib2.Request(url)
  response = urllib2.urlopen(request)
  returnData = json.loads(response.read())
  return returnData

def run(name, script, targets, arguments = [], type = 'script', serverGroups = [], 
        scheduleType = 0, startTime = 0, repeatInterval = 60, endTime = 0, repeatCount = 0):
  '''
    run script by create a job from job.py
  '''
  return scalex.job.create(name, script, targets, arguments, type, serverGroups,
                           scheduleType, startTime, repeatInterval, endTime, repeatCount)


#def _isNameExists(name):
#  '''
#FIXME
#  '''
#  path = '/scripts'
#  url = userinfo.geturl(path)
#  payload = {
#    "scriptName":name,
#    "scriptType":type,
#    "scriptDescription":base64.b64encode(description),
#    "scriptInputParams":[],
#    "tagList":[],
#    "scriptAttachments":[],
#    "scriptContent":base64.b64encode(content),
#  }
#  postData = json.dumps(payload)
#  request = urllib2.Request(url, postData)
#  request.add_header('Content-Type', 'application/json')
#  response = urllib2.urlopen(request)
#  returnData = json.loads(response.read())
#  return returnData

def create(name, type, content, description = '', params = [], tags = []):
  '''
    FIXME, not complete
    API : /scripts
    Method : POST
    URL Structure: https://<servername>/v0/scripts?access_token=<valid token generated by authentication>
    Input : Json payload like 
    {
    "scriptName":"Test script",
    "scriptType":"bat",
    "scriptDescription":"",
    "scriptInputParams":[],
    "tagList":[],
    "scriptAttachments":[],
    "scriptContent":"bGluZTEKbGluZTIKbGluZTMKbGluZTQKbGluZTUKZWNobyAnSGknCg=="
    }
  '''
  #FIXME, no script attachments, no tags, no params
  #ttps://manage.scalextreme.com/library?rid=411C2ECD-BDD0-4F61-9F37-E3718F02E084
  
#  if _isNameExists(name):
#    # FIXME, name exists
#    return
  path = '/scripts'
  url = userinfo.geturl(path)
  payload = {
    "scriptName":name,
    "scriptType":type,
    "scriptDescription":base64.b64encode(description),
    "scriptInputParams":[],
    "tagList":[],
    "scriptAttachments":[],
    "scriptContent":base64.b64encode(content),
  }
  postData = json.dumps(payload)
  request = urllib2.Request(url, postData)
  request.add_header('Content-Type', 'application/json')
  response = urllib2.urlopen(request)
  returnData = json.loads(response.read())
  return returnData

def delete(script = '', type = ''):
  '''
    API : /scripts/1234 or /scripts?id=1234 or
    Method : DELETE
    /scripts?type=user      Delete user scripts
    /scripts?type=org       Delete org scripts
    /scripts?type=purchase  Delete purchase scripts
  '''
  path = '/scripts'
  query = {}
  if script != '':
    path += str(script['scriptId'])
  else:
    assert type in ['user', 'org', 'purchase'], 'wrong script type'
    query['type'] = type
  url = userinfo.geturl(path, query)
  request = urllib2.Request(url)
  request.get_method = lambda: 'DELETE'
  response = urllib2.urlopen(request)
  returnData = json.loads(response.read())
  return returnData

def update(script, name = '', type = '', content = '', description = '', params = [], tags = [] ):
  '''
    FIXME, not complete
    API : /scripts/1234
    Method : POST
    URL Structure: https://<servername>/v0/scripts?access_token=<valid token generated by authentication>
    Input : Json payload like 
    {
    "scriptName":"Test script",
    "scriptType":"bat",
    "scriptDescription":"",
    "scriptInputParams":[],
    "tagList":[],
    "scriptAttachments":[],
    "scriptContent":"bGluZTEKbGluZTIKbGluZTMKbGluZTQKbGluZTUKZWNobyAnSGknCg=="
    }
  '''
  #FIXME, no script attachments
  path = '/scripts/' + str(script['scriptId'])
  parameters = []
  url = userinfo.geturl(path)
  payload = {
    "scriptName":name,
    "scriptType":type,
    "scriptDescription":base64.b64encode(description),
    "scriptInputParams":[],
    "tagList":[],
    "scriptAttachments":[],
    "scriptContent":base64.b64encode(content),
  }
  postData = json.dumps(payload)
  request = urllib2.Request(url, postData)
  request.add_header('Content-Type', 'application/json')
  response = urllib2.urlopen(request)
  returnData = json.loads(response.read())
  return returnData
